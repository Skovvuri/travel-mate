$(document).ready(function () {

    var selectedDatesInfo;  // startDate, endDate, numberOfDays

    // Initialize Date Range Picker
    // https://github.com/dangrossman/daterangepicker
    $("#dateRange").daterangepicker({
        opens: "left",
        drops: "down",
        autoApply: true,
        autoUpdateInput: false,
        minDate: moment(),
        maxSpan: {
            days: 7, // Limit the date range to 7 days
        },
        locale: {
            format: "DD-MM-YYYY", // Set the date format
            separator: " - ", // Set the separator between dates
            daysOfWeek: ["Su", "Mo", "Tu", "We", "Th", "Fr", "Sa"], // Set the abbreviated days of the week
            monthNames: [
                "January",
                "February",
                "March",
                "April",
                "May",
                "June",
                "July",
                "August",
                "September",
                "October",
                "November",
                "December",
            ], // Set the month names
        },
    });

    function retrieveAndSetSavedDates() {
        // Retrieve saved dates from local storage
        var savedDatesJSON = localStorage.getItem("selectedDates");

        if (savedDatesJSON) {
            // If saved dates exist, parse the JSON
            var savedDates = JSON.parse(savedDatesJSON);

            // Set the value of the date range input
            $("#dateRange").val(savedDates.startDate + " - " + savedDates.endDate);
            selectedDatesInfo = savedDates;
        }
    }

    retrieveAndSetSavedDates();

    // Handle the 'apply' event when a date range is selected
    $("#dateRange").on("apply.daterangepicker", function (ev, picker) {
        // Update the input value with the selected date range
        var selectedDates =
            picker.startDate.format("MM/DD/YYYY") +
            " - " +
            picker.endDate.format("MM/DD/YYYY");
        $(this).val(selectedDates);

        var startDate = picker.startDate.format("MM/DD/YYYY");
        var endDate = picker.endDate.format("MM/DD/YYYY");

        // Calculate the number of days selected
        var numberOfDays = picker.endDate.diff(picker.startDate, 'days') + 1;

        // Save the selected dates and number of days to local storage
        selectedDatesInfo = {
            startDate: startDate,
            endDate: endDate,
            numberOfDays: numberOfDays
        };
        localStorage.setItem("selectedDates", JSON.stringify(selectedDatesInfo));
    });

    // Event handler for Date Range input
    $("#dateRange").on("click", function () {
        // Check if #alertContainer has child elements
        if ($("#alertContainer:not(:empty)").length) {
            closeAlert()
        }
    });

    // Function to initialize Autocomplete for a given input element
    function initializeAutocomplete(inputSelector, cities) {
        // Initialize Autocomplete
        $(inputSelector).autocomplete({
            source: function (request, response) {
                var term = $.ui.autocomplete.escapeRegex(request.term);
                var startsWithMatcher = new RegExp("^" + term, "i");
                var containsMatcher = new RegExp(term, "i");

                // Filter the list of cities
                var filteredCities = $.grep(cities, function (value) {
                    return startsWithMatcher.test(value) || containsMatcher.test(value);
                });

                response(
                    filteredCities.length ? filteredCities : ["No matching cities"]
                );
            },
            select: function (event, ui) {
                // Handle selection
                var city = ui.item.value;
                console.log("Selected city: " + city);
            },
        });
    }

    // Load cities from JSON file (Randomly generated by AI)
    $.getJSON("./models/data/cities.json", function (data) {
        // Check if the data is not empty and is an array
        if (Array.isArray(data) && data.length > 0) {
            // Call the function to initialize Autocomplete
            initializeAutocomplete("#destination", data);
            console.log("City data loaded successfully.");
        } else {
            // Handle the case when the JSON file is empty or not an array
            console.error(
                "Error: Unable to load valid city data from the JSON file."
            );
        }
    });

    // Event handler for Destination input
    $("#destination").on("input", function () {
        // Check if #alertContainer has child elements
        if ($("#alertContainer:not(:empty)").length) {
            closeAlert()
        }
    });

    $(".search-button").on("click", function () {

        // Validation for destination
        var city = $(".destination").val().trim();
        if (city === "") {
            showAlert("Please enter a destination.", "danger");
            return;
        }
        console.log('city: ', city);

        // Validation for dateRange
        var dateRange = $("#dateRange").val();
        if (!dateRange) {
            showAlert("Please select a date", "danger");
            return;
        }

        // Save the city to local storage
        var cities = JSON.parse(localStorage.getItem("cities")) || [];

        // Trim the cities array to a maximum length of 5
        if (cities.length >= 5) {
            cities = cities.slice(-4); // Keep the last 4 elements
        }

        // Push the new city to the end of the array
        cities.push(city);
        localStorage.setItem("cities", JSON.stringify(cities));

        // Fetch weather data and update UI
        fetchWeather(city);
    });

    function fetchWeather(city) {

        var geocodeURL =
            "https://api.openweathermap.org/geo/1.0/direct?q=" +
            city +
            "&limit=7&appid=5a06ce152c88fa8a790870e5beea3c6f";

        fetch(geocodeURL)
            .then(function (response) {
                return response.json();
            })
            .then(function (data) {

                var lat = data[0].lat;
                var lon = data[0].lon;

                var queryURL =
                    "https://api.openweathermap.org/data/2.5/forecast?lat=" +
                    lat +
                    "&lon=" +
                    lon +
                    "&appid=5a06ce152c88fa8a790870e5beea3c6f";

                fetch(queryURL)
                    .then(function (response) {
                        return response.json();
                    })
                    .then(function (result) {
                        var weatherData = result;

                        // Check if the weatherData is valid
                        if (weatherData && weatherData.list && weatherData.list.length > 0) {

                            updateUI(weatherData);

                        } else {
                            showAlert('Invalid weather data. Please try again.', 'danger');
                            console.error('Invalid weather data received:', weatherData);
                        }
                    })
                    .catch(function (error) {
                        showAlert('Error fetching weather data', 'danger');
                        console.log("Error fetching weather data:", error);
                    });
            })
            .catch(function (error) {
                showAlert('Error fetching geocoding data', 'danger');
                console.log("Error fetching geocoding data:", error);
            });
    }

    function updateUI(weatherData) {
        // Clear existing forecast list
        $("#forecastList").empty();

        var startDate = selectedDatesInfo.startDate;
        var endDate = selectedDatesInfo.endDate;
        var numberOfDays = selectedDatesInfo.numberOfDays;

        // Calculate the number of entries to display based on numberOfDays
        var entriesPerDay = 8; // Assuming 8 entries per day in the OpenWeatherMap API response
        var entriesToDisplay = numberOfDays * entriesPerDay;

        // Iterate over the weather data
        for (var i = 0; i < entriesToDisplay && i < weatherData.list.length; i += entriesPerDay) {
            // Create a new card for each day (using the first entry of each day)
            var dayCard = createDayCard(weatherData.list[i], i);
            $("#forecastList").append(dayCard);
        }
    }

    function createDayCard(weatherInfo, index) {

        var date = new Date(weatherInfo.dt * 1000);
        var cardTitleSelector = "card-title-" + (index + 1);
        var tempSelector = "temp-" + (index + 1);
        var windSelector = "wind-" + (index + 1);
        var humiditySelector = "humidity-" + (index + 1);
        var iconsEl = "icon-" + (index + 1);
        var iconNum = weatherInfo.weather[0].icon;
        var icon = "https://openweathermap.org/img/w/" + iconNum + ".png";

        // Create HTML for the day card
        return `
            <div class="card-wrap">
                <div class="card card-forecast">
                    <div class="list-group list-group-flush fs-5-card">
                        <h3 class="${cardTitleSelector} fs-5-card">${date.toLocaleDateString()}</h3>
                        <p class="list-group-item fs-5-card ">
                            <img class="${iconsEl}" src="${icon}" alt="Weather Icon">
                        </p>
                        <p class="list-group-item fs-5-card ${tempSelector}">Temp: ${convertKelvinToCelsius(weatherInfo.main.temp)}Â°C</p>
                        <p class="list-group-item fs-5-card ${windSelector}">Wind: ${weatherInfo.wind.speed} KPH</p>
                        <p class="list-group-item fs-5-card ${humiditySelector}">Humidity: ${weatherInfo.main.humidity}%</p>
                    </div>
                </div>
            </div>
        `;
    }

    function convertKelvinToCelsius(kelvinTemp) {
        return (kelvinTemp - 273.15).toFixed(2);
    }

    // Function to show Bootstrap alert
    function showAlert(message, type) {
        var alertElement = `
      <div class="alert alert-${type} alert-dismissible fade show" role="alert">
        ${message}
        <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
      </div>
    `;

        // Append the alert to the alertContainer
        $("#alertContainer").html(alertElement);

        // Automatically close the alert after a certain duration (e.g., 5 seconds)
        setTimeout(function () {
            $(".alert").alert('close');
        }, 5000);
    }

    // Function to hide Bootstrap alert
    function closeAlert() {
        $(".alert").alert('close');
    }
});